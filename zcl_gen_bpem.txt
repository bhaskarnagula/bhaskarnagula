CLASS zcl_gen_bpem DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES if_rap_query_provider.
  PROTECTED SECTION.
  PRIVATE SECTION.

    METHODS is_key_filter
      IMPORTING it_filter_cond          TYPE if_rap_query_filter=>tt_name_range_pairs
      RETURNING VALUE(rv_is_key_filter) TYPE abap_bool.

    METHODS get_orderby_clause
      IMPORTING it_sort_elements         TYPE if_rap_query_request=>tt_sort_elements
      RETURNING VALUE(rv_orderby_string) TYPE string.

ENDCLASS.



CLASS ZCL_GEN_BPEM IMPLEMENTATION.


  METHOD if_rap_query_provider~select.

    "variables needed to call BAPI's
    DATA: lt_header TYPE STANDARD TABLE OF zgen_ce_bpem_header,
          ls_header TYPE zgen_ce_bpem_header.

    "select options

    "######################### ABAP source code ################################
*   ensure: in case of a single record is requested (e.g. data for a detail page),
*           only one record is returned and SET_TOTAL_NUMBER_OF_RECORDS = 1
    DATA lv_orderby_string TYPE string.
    DATA lv_select_string TYPE string.
    "variables generic for implementation of custom entity
    DATA lv_details_read TYPE abap_bool.

    TRY.

        IF io_request->is_data_requested( ).

          TRY.
              "get and add filter
              DATA(lt_filter_cond) = io_request->get_filter( )->get_as_ranges( ). "  get_filter_conditions( ).

            CATCH cx_rap_query_filter_no_range INTO DATA(lx_no_sel_option).

              "@todo :
              " raise an exception that the filter that has been provided
              " cannot be converted into select options
              " here we just continue

          ENDTRY.

          DATA(lv_top)     = io_request->get_paging( )->get_page_size( ).
          DATA(lv_skip)    = io_request->get_paging( )->get_offset( ).
          DATA(lt_fields)  = io_request->get_requested_elements( ).
          DATA(lt_sort)    = io_request->get_sort_elements( ).

          " $orderby was called
          IF lt_sort IS NOT INITIAL.
            CLEAR lv_orderby_string.
            LOOP AT lt_sort INTO DATA(ls_sort).
              IF ls_sort-descending = abap_true.
                CONCATENATE lv_orderby_string ls_sort-element_name 'DESCENDING' INTO lv_orderby_string SEPARATED BY space.
              ELSE.
                CONCATENATE lv_orderby_string ls_sort-element_name 'ASCENDING' INTO lv_orderby_string SEPARATED BY space.
              ENDIF.
            ENDLOOP.
          ELSE.
            " lv_orderby_string must not be empty.
            lv_orderby_string = 'BPEM_No'.
          ENDIF.

          " $select handling
          IF lt_fields IS NOT INITIAL.
            CONCATENATE LINES OF lt_fields INTO lv_select_string  SEPARATED BY ','.
          ELSE.
            "check coding. If no columns are specified via $select retrieve all columns from the model instead?
            lv_select_string = '*'.
          ENDIF.

          "check if filter condition is for a single read
          lv_details_read = is_key_filter( lt_filter_cond ).

          "single read
          IF lv_details_read = abap_true.

            READ TABLE lt_filter_cond WITH KEY name = 'BPEM_No' INTO DATA(ls_productid_filter_key).
            IF sy-subrc = 0 AND lines( ls_productid_filter_key-range ) = 1.
              READ TABLE ls_productid_filter_key-range INTO DATA(ls_id_option) INDEX 1.
              IF sy-subrc = 0 AND ls_id_option-sign = 'I' AND ls_id_option-option = 'EQ' AND ls_id_option-low IS NOT INITIAL.
                "read details for single record in list
                " ls_product_rfc_key-productid = ls_id_option-low.

                SELECT SINGLE * FROM emma_case WHERE CASENR = @ls_id_option-low INTO @DATA(ls_emm).

                APPEND VALUE #( BPEM_No = ls_emm-CASENR
      CCAT = ls_emm-CCAT
      PRIO  = ls_emm-PRIO
      BRGRU = ls_emm-BRGRU
      MAINOBJTYPE = ls_emm-MAINOBJTYPE
      MAINOBJKEY = ls_emm-MAINOBJKEY
      ORIG_DATE = ls_emm-ORIG_DATE
      ORIG_TIME  = ls_emm-ORIG_TIME ) To lt_header.

              ENDIF.
            ENDIF.

            "the request is a GET_LIST request and a filter has been provided
          ELSE .

            SELECT * FROM emma_case INTO TABLE @DATA(lt_emm).
            MOVE-CORRESPONDING lt_emm to lt_header.

          ENDIF.

          "Apply all query options to filter so that also filter options are supported that
          "are not available as filter parameters for the RFC function modules being used
          "Also ensure that not more elements are returned than have been
          "requested by the framework

          IF lv_details_read = abap_false.

            DATA(dyn_clause) =  io_request->get_filter( )->get_as_sql_string( ).

*            SELECT (lv_select_string) FROM @lt_header AS products
*            WHERE (dyn_clause)
*            ORDER BY (lv_orderby_string)
*            INTO CORRESPONDING FIELDS OF TABLE @lt_header
*            UP TO @lv_top ROWS
*            OFFSET @lv_skip .

            IF io_request->is_total_numb_of_rec_requested(  ).
              io_response->set_total_number_of_records( lines( lt_header ) ).
            ENDIF.
            io_response->set_data( lt_header ).

          ELSE.

            io_response->set_total_number_of_records( lines( lt_header ) ).
            io_response->set_data( lt_header ).

          ENDIF.




        ELSE.
          "no data has been requested
        ENDIF.

        "error handling
      CATCH cx_rap_query_provider INTO DATA(lx_exc).


    ENDTRY.

  ENDMETHOD.


  METHOD is_key_filter.

    "check if the request is a single read
    READ TABLE it_filter_cond WITH KEY name = 'PRODUCTID' INTO DATA(ls_productid_filter_key).
    IF sy-subrc = 0 AND lines( ls_productid_filter_key-range ) = 1.
      READ TABLE ls_productid_filter_key-range INTO DATA(ls_id_option) INDEX 1.
      IF sy-subrc = 0 AND ls_id_option-sign = 'I' AND ls_id_option-option = 'EQ' AND ls_id_option-low IS NOT INITIAL.
        "read details for single record in list
        rv_is_key_filter = abap_true.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD get_orderby_clause.

  ENDMETHOD.
ENDCLASS.